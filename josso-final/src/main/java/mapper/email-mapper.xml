<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Email">

	<resultMap id="resultEmail" type="Email">
		<id property="emailNumber" column="EMAIL_NUMBER"/>
		<result property="employeeNumber" column="EMPLOYEE_NUMBER"/>
		<result property="emailSend" column="EMAIL_SEND" />
		<result property="emailAccept" column="EMAIL_ACCEPT" />
		<result property="emailReference" column="EMAIL_REFERENCE" />
		<result property="emailTitle" column="EMAIL_TITLE" />
		<result property="emailContent" column="EMAIL_CONTENT" />
		<result property="emailFile" column="EMAIL_FILE"/>
		<result property="regDate" column="REGDATE" />
		<result property="emailWastebasket" column="EMAIL_WASTEBASKET" />
		<result property="emailRead" column="EMAIL_READ"/>
		<result property="emailPosition" column="EMAIL_POSITION"/>
		<result property="employeeName" column="EMPLOYEE_NAME"/>
		<result property="rankCode" column="RANK_CODE"/>
		<result property="departmentCode" column="DEPARTMENT_CODE"/>
	</resultMap>

	<!-- email 받은메일함 - 리스트 -->
	<select id="AcceptList" parameterType="String" resultMap="resultEmail"><!-- resultType="Email" -->
		SELECT EMAIL.*, EMPLOYEE.EMPLOYEE_NAME, EMPLOYEE.RANK_CODE, EMPLOYEE.DEPARTMENT_CODE FROM EMAIL, EMPLOYEE WHERE ((EMAIL.EMPLOYEE_NUMBER = EMPLOYEE.EMPLOYEE_NUMBER) AND (((EMAIL.EMAIL_ACCEPT = #{id} OR EMAIL.EMAIL_REFERENCE = #{id}) AND EMAIL.EMAIL_WASTEBASKET = 'NO') AND (EMAIL.EMAIL_POSITION = 'ALL' OR EMAIL.EMAIL_POSITION = 'ACCEPT'))) ORDER BY EMAIL.EMAIL_NUMBER DESC          
	</select>

	<!-- email 받은메일함 - 리스트 - 자세히보기 -->
	<select id="AcceptDetail" resultMap="resultEmail">
		SELECT EMAIL.*, EMPLOYEE.EMPLOYEE_NAME, EMPLOYEE.RANK_CODE, EMPLOYEE.DEPARTMENT_CODE FROM EMAIL, EMPLOYEE WHERE (EMAIL.EMPLOYEE_NUMBER = EMPLOYEE.EMPLOYEE_NUMBER) AND EMAIL_NUMBER = #{num}
	</select>

	<!-- email 보낸메일함 - 리스트 -->
	<select id="SendList" parameterType="String" resultMap="resultEmail"><!-- resultType="Email" -->
		<!-- SELECT * FROM  -->
			SELECT EMAIL.*, EMPLOYEE.EMPLOYEE_NAME, EMPLOYEE.RANK_CODE, EMPLOYEE.DEPARTMENT_CODE 
		    FROM EMAIL, EMPLOYEE 
		    WHERE ((EMAIL.EMPLOYEE_NUMBER = EMPLOYEE.EMPLOYEE_NUMBER) 
		    AND (EMAIL_SEND = #{id}
		    AND (EMAIL_POSITION = 'ALL' 
		    OR EMAIL_POSITION ='SEND'))) 
		    <!-- WHERE EMAIL_TITLE LIKE '%' || #{field} ||'%' AND EMAIL_ACCEPT LIKE '%' || #{query} ||'%'; -->
	</select>
	
	<!-- email 휴지통 - 리스트 -->
	<select id="WastebasketList" parameterType="String" resultMap="resultEmail"><!-- resultType="Email" -->
		SELECT EMAIL.*, EMPLOYEE.EMPLOYEE_NAME, EMPLOYEE.RANK_CODE, EMPLOYEE.DEPARTMENT_CODE FROM EMAIL, EMPLOYEE WHERE ((EMAIL.EMPLOYEE_NUMBER = EMPLOYEE.EMPLOYEE_NUMBER) AND (((EMAIL.EMAIL_ACCEPT = #{id} OR EMAIL.EMAIL_REFERENCE = #{id}) AND EMAIL.EMAIL_WASTEBASKET = 'YES') AND (EMAIL.EMAIL_POSITION = 'ALL' OR EMAIL.EMAIL_POSITION = 'ACCEPT'))) ORDER BY EMAIL.EMAIL_NUMBER DESC     
	</select>

	<!-- email 자세히보기 - 답장버튼 -->
	<select id="EmailReply" parameterType="int" resultMap="resultEmail"><!-- resultType="Email" -->
		SELECT EMAIL.*, EMPLOYEE.EMPLOYEE_NAME, EMPLOYEE.RANK_CODE, EMPLOYEE.DEPARTMENT_CODE FROM EMAIL, EMPLOYEE WHERE (EMAIL.EMPLOYEE_NUMBER = EMPLOYEE.EMPLOYEE_NUMBER) AND EMAIL_NUMBER = #{num}
	</select>
	
	<!-- 참조자 정보 뽑아오기 -->
	<select id="Er" parameterType="int" resultMap="resultEmail">
		SELECT B.EMPLOYEE_NAME, B.DEPARTMENT_CODE, B.RANK_CODE FROM EMAIL A, EMPLOYEE B WHERE A.EMAIL_REFERENCE = B.EMPLOYEE_EMAIL AND A.EMAIL_NUMBER = #{num} <!-- 참조자정보 -->
	</select>
	
	<!-- 보낸사람 정보 뽑아오기 -->
	<select id="Es" parameterType="int" resultMap="resultEmail">
		SELECT B.EMPLOYEE_NAME, B.DEPARTMENT_CODE, B.RANK_CODE FROM EMAIL A, EMPLOYEE B WHERE A.EMAIL_SEND = B.EMPLOYEE_EMAIL AND A.EMAIL_NUMBER = #{num}
	</select>
	
	<!-- 받는사람 정보 뽑아오기 -->
	<select id="Ea" parameterType="int" resultMap="resultEmail">
		SELECT B.EMPLOYEE_NAME, B.DEPARTMENT_CODE, B.RANK_CODE FROM EMAIL A, EMPLOYEE B WHERE A.EMAIL_ACCEPT = B.EMPLOYEE_EMAIL AND A.EMAIL_NUMBER = #{num}
	</select>
	<!-- 새메일쓰기 - 보내기버튼 -->
	<insert id="WriteSend" parameterType="Email">
		INSERT INTO EMAIL VALUES (#{employeeNumber}, EMAIL_NUM_SEQ.NEXTVAL,#{emailSend}, #{emailAccept}, #{emailReference}, #{emailTitle}, #{emailContent}, SYSDATE, DEFAULT, DEFAULT, DEFAULT,'')
	</insert>
	
	<!-- 받은메일함 - 자세히보기 - 읽음/안읽음 처리 -->
	<update id="AcceptRead" parameterType="Email">
		UPDATE EMAIL SET EMAIL_READ = CASE WHEN EMAIL_READ = 'YES' THEN 'NO' ELSE 'YES' END WHERE EMAIL_NUMBER = #{num}
	</update>
	
	<!-- 메일 자세히보기(제목클릭) 할 경우 자동 읽음처리 -->
	<!-- <update id="AutoRead" parameterType="Email">
		UPDATE EMAIL SET EMAIL_READ = 'YES' WHERE EMAIL_NUMBER = #{num}
	</update> -->
	
	<!-- 1. 메일함 - 자세히보기 - 휴지통 or 2. 휴지통 - 자세히보기 - 복구 버튼 클릭 -->
	<update id="AcceptWastebasket" parameterType="Email">
		UPDATE EMAIL SET EMAIL_WASTEBASKET = CASE WHEN EMAIL_WASTEBASKET = 'YES' THEN 'NO' ELSE 'YES' END WHERE EMAIL_NUMBER = #{num}
	</update>
	
	<!-- 보낸메일함 - 자세히보기 - 휴지통버튼 클릭  -->
	<update id="SendWastebasket" parameterType="Email">
		UPDATE EMAIL SET EMAIL_POSITION = DECODE(email_position,'ALL','ACCEPT','EMPTY') WHERE EMAIL_NUMBER = #{num}
	</update>
	
	<!-- 휴지통 - 자세히보기 - 삭제버튼 클릭 -->
	<update id="WastebasketDelete" parameterType="Email">
		UPDATE EMAIL SET EMAIL_POSITION = DECODE(email_position,'ALL','SEND','EMPTY') WHERE EMAIL_NUMBER = #{num}
	</update>
	
	<!-- 리스트 - 제목 클릭 - 자동 읽음처리 -->
	<update id="autoRead" parameterType="Email">
		UPDATE EMAIL SET EMAIL_READ = 'YES' WHERE EMAIL_NUMBER = #{num}
	</update>
	
	<!-- 페이징 ListPage -->
	<!-- <select id="ListPage" resultType="Email" parameterType="com.mvcproject.email.vo.Criteria">
		SELECT EMAIL_NUMBER, 
                EMAIL_TITLE,
                EMAIL_SEND,
                EMAIL_ACCEPT,
                REGDATE
    	FROM (
                SELECT EMAIL_NUMBER, 
                        EMAIL_TITLE, 
                        EMAIL_SEND,
                        EMAIL_ACCEPT,
                        REGDATE,
                        ROW_NUMBER() OVER(ORDER BY EMAIL_NUMBER DESC) AS RNUM 
                FROM EMAIL 
                            ) MP 
		WHERE RNUM BETWEEN #{rowStart} AND #{rowEnd} 
		ORDER BY EMAIL_NUMBER DESC
	</select> -->
	
	<!-- 게시물 총 갯수 -->
	<select id="ListCount" resultType="int">
		<![CDATA[
			SELECT COUNT(EMAIL_NUMBER) FROM EMAIL WHERE EMAIL_NUMBER > 0
		]]>
	</select>
	
	<!-- 받은 메일함에서 검색기능 -->	
	<select id="EmailSearch" parameterType="String" resultMap="resultEmail">
		SELECT * FROM EMAIL WHERE EMAIL_TITLE LIKE '%' || #{word} ||'%' AND EMAIL_SEND = #{num}
	</select>
	
	
	<!-- <select id="findActiveBlogLik" resultMap="resultEmail">
		SELECT * FROM EMAIL
		WHERE
		<if test="emailTitle != null">
			emailTitle like #{title}
		</if>
	</select> -->
	
	
	
	

</mapper>